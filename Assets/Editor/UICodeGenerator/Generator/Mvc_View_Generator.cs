using System.Collections;
using System.Collections.Generic;
using System.Text.RegularExpressions;

using UICodeGeneration;
using UnityEngine;

/// <summary>
/// MVC-View代码生成
/// </summary>
public class Mvc_View_Generator : IGenerateCode
{
    /// <summary>
    /// 生成代码并返回代码文本内容
    /// </summary>
    /// <returns></returns>
    public string GenerationCustom()
    {
        Debug.LogError("未实现的自定义生成");
        return null;
    }

    /// <summary>
    /// 生成代码并返回代码文本内容
    /// </summary>
    /// <param name="info"></param>
    /// <returns></returns>
    public string Generation(ViewCodeInfo info)
    {
        if (info == null)
            return null;

        info.GenerationEnvironment = null;
#line 2
        info.Write(
@"//<auto generated>
//Generated by tool，DONT EDIT IT !
//</auto generated>
using UnityEngine;
using System.Collections;
using UnityEngine.UI;
using TMPro;
using GameBase.UI;
using TheraBytes.BetterUi;

namespace GameLogic
{
");

#line default
#line hidden
#line 11
        info.Write("public class ");
#line default
#line hidden
#line 13
        info.Write(info.ToStringHelper.ToStringWithCulture(info.className));
#line default
#line hidden
#line 13
        info.Write(" : BaseView\r\n{\r\n");
#line default
#line hidden
        info.Write("\tpublic const string NAME =\"{0}\";\r\n", info.className);
#line 15
        foreach (var item in info.source)
        {
#line default
#line hidden
#line 18
            info.Write("\tpublic ");
#line default
#line hidden
#line 18
            info.Write(info.ToStringHelper.ToStringWithCulture(item.comType));

#line default
#line hidden
#line 18
            info.Write(" ");
#line default
#line hidden
#line 18
            info.Write(info.ToStringHelper.ToStringWithCulture(item.memberName));
#line default
#line hidden
#line 18
            info.Write(";\r\n");
#line default
#line hidden
#line 19
        }

#line default
#line hidden
#line 22
        info.Write("\r\n\tprotected override void InitElementBinding ()\r\n\t{\r\n");
#line default
#line hidden
        info.Write("\t\tvar root = this.gameObject.transform;\r\n");
#line 25
        foreach (var item in info.source)
        {
#line default
#line hidden
#line 28
            if (string.IsNullOrEmpty(item.path))
            {
#line default
#line hidden
#line 29
                info.Write("\t");
#line default
#line hidden
#line 29
                info.Write(info.ToStringHelper.ToStringWithCulture(item.memberName));
#line default
#line hidden
#line 29
                info.Write(" = root.GetComponent<");
#line default
#line hidden
#line 29
                info.Write(info.ToStringHelper.ToStringWithCulture(item.comType));
#line default
#line hidden
#line 29
                info.Write(">();\r\n");
#line default
#line hidden
#line 30
            }
            else
            {
#line default
#line hidden
#line 33
                info.Write("\t");
#line default
#line hidden
#line 33
                if (item.comType == "Transform")
                {
#line default
#line hidden
#line 34
                    info.Write("\t");
#line default
#line hidden
#line 34
                    info.Write(info.ToStringHelper.ToStringWithCulture(item.memberName));
#line default
#line hidden
#line 34
                    info.Write(" = root.Find(\"");
#line default
#line hidden
#line 34
                    info.Write(info.ToStringHelper.ToStringWithCulture(item.path));
#line default
#line hidden
#line 34
                    info.Write("\");\r\n");
#line default
#line hidden
#line 35
                }
                else if (item.comType == "GameObject")
                {
                    info.Write("\t");
                    info.Write(info.ToStringHelper.ToStringWithCulture(item.memberName));
                    info.Write(" = root.Find(\"");
                    info.Write(info.ToStringHelper.ToStringWithCulture(item.path));
                    info.Write("\").gameObject;\r\n");
                }
                else
                {
#line default
#line hidden
#line 36
                    info.Write("\t");
#line default
#line hidden
#line 36
                    info.Write(info.ToStringHelper.ToStringWithCulture(item.memberName));
#line default
#line hidden
#line 36
                    info.Write(" = root.Find(\"");
#line default
#line hidden
#line 36
                    info.Write(info.ToStringHelper.ToStringWithCulture(item.path));
#line default
#line hidden
#line 36
                    info.Write("\").GetComponent<");
#line default
#line hidden
#line 36
                    info.Write(info.ToStringHelper.ToStringWithCulture(item.comType));
#line default
#line hidden
#line 36
                    info.Write(">();\r\n");
#line default
#line hidden
#line 37

                }
#line default
#line hidden
#line 40

            }
#line default
#line hidden
#line 43
        }
#line default
#line hidden
#line 46
        info.Write("\t}\r\n}\r\n");
#line default
#line hidden

        info.Write(@"}");
        return info.GenerationEnvironment.ToString();

    }

    /// <summary>
    /// 从代码文本内容判断是否View文件
    /// </summary>
    /// <param name="text"></param>
    /// <param name="className"></param>
    /// <returns></returns>
    public bool FilterViewByCodeContent(string text, out string className)
    {
        className = "";
        string sPattern = @"public\s+partial\s+class\s+(\S+)\s*\:\s*BaseView[\n\s]+";
        System.Text.RegularExpressions.Match mat = System.Text.RegularExpressions.Regex.Match(text, sPattern);
        if (!mat.Success)
            mat = System.Text.RegularExpressions.Regex.Match(text, @"public\s+class\s+(\S+)\s*\:\s*BaseView[\n\s]+");
        if (mat != null && mat.Success && text.Contains("InitElementBinding"))
        {
            className = mat.Groups[1].Value;
            return true;
        }

        return false;
    }


    /// <summary>
    /// 正则解析View代码文件转为组件数据
    /// </summary>
    /// <param name="UIPrefabInst"> UI预设实例 </param>
    /// <param name="CodeTextContent"> 对应代码文本内容 </param>
    /// <param name="error"> 错误信息 </param>
    /// <returns> 返回组件数据 </returns>
    public Dictionary<string, UIComponentInfo> ParseViewCode(GameObject UIPrefabInst, string CodeTextContent, out string error)
    {
        error = "";
        System.Text.RegularExpressions.Match contentMat = Regex.Match(CodeTextContent, @"protected override void InitElementBinding\s*\(\)[\n\s]*\{[\n\s]*([\n\s\S]+?)[\n\s]*\}");
        if (!contentMat.Success)
        {
            error = "匹配出错:InitElementBinding";
            return null;
        }

        if (UIPrefabInst == null)
        {
            error = "参数出错:UIPrefabInst is null";
            return null;
        }

        Dictionary<string, UIComponentInfo> outDic = new Dictionary<string, UIComponentInfo>();
        System.Text.StringBuilder sbError = new System.Text.StringBuilder();

        string sContent = contentMat.Groups[1].Value;
        string[] sLines = sContent.Split('\n');
        string pat1 = @"(\S+) = root\.GetComponent<(\S+)>\(\)";
        string pat2 = @"(\S+) = root\.Find\(""(\S+)""\)(\S*);";
        string comPattern = @"\.GetComponent<(\S+)>\(\)";
        Match mat;
        foreach (string sLine in sLines)
        {
            mat = Regex.Match(sLine, pat1);
            string name = string.Empty;
            string type = string.Empty;
            string path = string.Empty;
            if (mat.Success)
            {
                name = mat.Groups[1].Value;
                type = mat.Groups[2].Value;
                path = "";
            }
            else
            {
                mat = Regex.Match(sLine, pat2);
                name = mat.Groups[1].Value;
                path = mat.Groups[2].Value;
                type = mat.Groups[3].Value;
                if (string.IsNullOrEmpty(type))
                    type = "Transform";
                else if (type.EndsWith("gameObject"))
                    type = "GameObject";
                else if (type.Contains("GetComponent"))
                {
                    Match comMat = Regex.Match(sLine, comPattern);
                    if (comMat == null || !comMat.Success)
                        sbError.AppendLine($"未匹配类型：{sLine}");
                    type = comMat.Groups[1].Value;
                }
                else
                    sbError.AppendLine($"未匹配类型：{sLine}");

            }

            if (!string.IsNullOrEmpty(name))
            {
                UIComponentInfo item = new UIComponentInfo(UIPrefabInst.transform, name, path, type);
                if (!outDic.ContainsKey(item.uid))
                {
                    item.validated = UIPrefabInst.transform.Find(item.path) != null;
                    outDic.Add(item.uid, item);
                }
            }
            else
            {
                if (!sLine.Contains("var root"))
                    sbError.AppendLine($"name is null: {sLine}");
                error = sbError.ToString();
            }
        }

        error = sbError.ToString();
        return outDic;
    }
}
